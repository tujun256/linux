name: build dtb

on:
  workflow_dispatch:  # 手动触发
  push:
    branches: [ master ]
    paths:
      - 'arch/arm64/boot/dts/rockchip/rk3588-HL-ZF9000.dts'  # 匹配无连字符的DTS名

jobs:
  build-specific-dtb:
    runs-on: ubuntu-latest
    steps:
      ########################################################################
      # 步骤1：检出 tujun256/linux 仓库（已包含目标DTS）
      ########################################################################
      - name: 检出 tujun256/linux 仓库
        uses: actions/checkout@v4
        with:
          repository: tujun256/linux
          path: linux
          fetch-depth: 1
          token: ${{ secrets.GITHUB_TOKEN }}

      ########################################################################
      # 步骤2：安装编译依赖
      ########################################################################
      - name: 安装编译依赖
        run: |
          sudo apt-get update -y
          sudo apt-get install -y gcc-aarch64-linux-gnu  # arm64交叉工具链
          sudo apt-get install -y device-tree-compiler make bc flex bison libssl-dev

      ########################################################################
      # 步骤3：修复sed语法，添加DTB编译规则（核心修正）
      ########################################################################
      - name: 验证/添加 rk3588-HL-ZF9000.dtb 编译规则
        run: |
          DTS_FILE="rk3588-HL-ZF9000.dts"
          DTB_FILE="${DTS_FILE%.dts}.dtb"
          MAKEFILE_PATH="./linux/arch/arm64/boot/dts/rockchip/Makefile"
          SEARCH_PATTERN="dtb-\$\(CONFIG_ARCH_ROCKCHIP\) += rk3588"  # 转义$和()
          INSERT_LINE="dtb-\$(CONFIG_ARCH_ROCKCHIP) += $DTB_FILE"

          # 检查并添加规则
          if ! grep -q "^${INSERT_LINE}$" "$MAKEFILE_PATH"; then
            echo "ℹ️ 正在添加 $DTB_FILE 规则..."
            sed -i "/${SEARCH_PATTERN}/i ${INSERT_LINE}" "$MAKEFILE_PATH"  # 修正sed语法
            # 二次验证
            if ! grep -q "^${INSERT_LINE}$" "$MAKEFILE_PATH"; then
              echo "❌ 规则添加失败"
              exit 1
            fi
            echo "✅ 规则添加成功：${INSERT_LINE}"
          else
            echo "ℹ️ 规则已存在，无需添加"
          fi

      ########################################################################
      # 步骤4：配置内核（启用Rockchip架构）
      ########################################################################
      - name: 配置内核
        run: |
          cd ./linux
          make ARCH=arm64 defconfig -j$(nproc)
          # 兜底：确保Rockchip架构启用
          if ! grep -q "CONFIG_ARCH_ROCKCHIP=y" .config; then
            echo "CONFIG_ARCH_ROCKCHIP=y" >> .config
            echo "✅ 手动启用Rockchip架构"
          else
            echo "✅ Rockchip架构已启用"
          fi

      ########################################################################
      # 步骤5：编译DTB
      ########################################################################
      - name: 编译 rk3588-HL-ZF9000.dtb
        run: |
          cd ./linux
          DTB_FILE="rk3588-HL-ZF9000.dtb"
          DTB_PATH="arch/arm64/boot/dts/rockchip/$DTB_FILE"

          # 编译DTB（仅设备树，加速）
          make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- dtbs -j$(nproc)

          # 验证编译结果
          if [ -f "$DTB_PATH" ]; then
            echo "✅ 编译成功！文件路径：$DTB_PATH"
            ls -lh "$DTB_PATH"  # 显示文件信息
          else
            echo "❌ 编译失败，未找到 $DTB_PATH"
            exit 1
          fi

      ########################################################################
      # 步骤6：上传产物
      ########################################################################
      - name: 上传 DTB 产物
        uses: actions/upload-artifact@v4
        with:
          name: rk3588-HL-ZF9000-dtb
          path: ./linux/arch/arm64/boot/dts/rockchip/rk3588-HL-ZF9000.dtb
          retention-days: 90
          if-no-files-found: error
